@model UpdateProductVM

@{
    ViewBag.Title = "Product Maintenance | Edit Product";
}
<form class="form" method="post" enctype="multipart/form-data">

    <div asp-validation-summary="ModelOnly"></div>

    <label asp-for="Name"></label>
    <input asp-for="Name" autofocus>
    <span asp-validation-for="Name"></span>

    <label asp-for="Price"></label>
    <input asp-for="Price">
    <span asp-validation-for="Price"></span>

    <label asp-for="Stock"></label>
    <input asp-for="Stock">
    <span asp-validation-for="Stock"></span>

    <label asp-for="Category"></label>
    <select asp-for="Category" asp-items="Model.Categories">
        <option value="">- Select One -</option>
    </select>
    <span asp-validation-for="Category"></span>

    <label asp-for="Photo"></label>
    <div class="form-group">
        <small>Drag and Drop Photo Here, Click to Select</small>

        <div id="drop-area" class="upload-area" onclick="triggerFileInput()">
            <input asp-for="Photo" id="photoInput" type="file" accept="image/jpeg,image/png" hidden onchange="handleFileChange(event)" />
            <img id="photoPreview" src="/products/@Model.PhotoURL" alt="Product Photo" style="max-width: 250px; display: block;">

            <input type="hidden" asp-for="PhotoURL" />
        </div>
    </div>
    <span asp-validation-for="Photo"></span>

    <label>Webcam Capture:</label>
    <div class="form-group">
        <video id="webcam" autoplay></video>
        <button type="button" id="captureButton">Capture</button>
        <canvas id="canvas" style="display:none;"></canvas>
    </div>

    <section>
        <button>Update</button>
        <button type="reset">Reset</button>
    </section>
</form>

@section foot {
    <script>

        $.validator.setDefaults({ ignore: '' });
        //Drag and drop, Normal Insert and Web Capture
        const dropArea = document.getElementById('drop-area');
        const inputElement = document.getElementById('photoInput');
        const previewElement = document.getElementById('photoPreview');
        const webcamElement = document.getElementById('webcam');
        const canvasElement = document.getElementById('canvas');
        const captureButton = document.getElementById('captureButton');

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, () => dropArea.classList.add('highlight'), false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, () => dropArea.classList.remove('highlight'), false);
        });

        dropArea.addEventListener('drop', handleDrop, false);

        function handleDrop(e) {
            let dt = e.dataTransfer;
            let files = dt.files;
            inputElement.files = files;

            handleFileChange({ target: inputElement });
        }

        function handleFileChange(event) {
            let file = event.target.files[0];
            if (file) {
                previewImage(file);
            }
        }

        function previewImage(file) {
            let reader = new FileReader();
            reader.onload = function (e) {
                previewElement.src = e.target.result;
            }
            reader.readAsDataURL(file);
        }

        function triggerFileInput() {
            inputElement.click();
        }

        // Webcam capture functionality
        navigator.mediaDevices.getUserMedia({ video: true })
            .then(function (stream) {
                webcamElement.srcObject = stream;
            })
            .catch(function (err) {
                console.error("Error accessing webcam: " + err);
            });

        captureButton.addEventListener('click', function() {
            const context = canvasElement.getContext('2d');
            canvasElement.width = webcamElement.videoWidth;
            canvasElement.height = webcamElement.videoHeight;
            context.drawImage(webcamElement, 0, 0, webcamElement.videoWidth, webcamElement.videoHeight);
            canvasElement.toBlob(function(blob) {
                const file = new File([blob], "webcam-photo.jpg", { type: "image/jpeg" });
                inputElement.files = new FileListItems([file]);
                previewImage(file);
            });
        });
        function FileListItems(files) {
            var b = new ClipboardEvent("").clipboardData || new DataTransfer();
            for (var i = 0, len = files.length; i < len; i++) b.items.add(files[i]);
            return b.files;
        }

    </script>

    <style>
        #drop-area {
            border: 2px dashed #ccc;
            padding: 20px;
            text-align: center;
            cursor: pointer;
        }

        .highlight {
            border-color: #6c757d;
            background-color: #f0f0f0;
        }

        .upload-area small {
            display: block;
            margin-bottom: 10px;
        }

        #webcam {
            display: block;
            margin: 10px 0;
            width: 250px;
            border: 1px solid #ccc;
        }
    </style>
}
